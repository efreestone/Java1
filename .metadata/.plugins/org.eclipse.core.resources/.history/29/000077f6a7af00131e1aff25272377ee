//Elijah Freestone
//Java 1 term 1403
//Week 3
//March 15th, 2014

package com.elijahfreestone.cities;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;

import org.json.JSONException;
import org.json.JSONObject;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.util.Log;

import com.elijahfreestone.java1project3.MainActivity;

public class CitiesJSON {
	//Declare TAG constant
	static String TAG = "NETWORK DATA - MAINACTIVITY";
	
	static String testURL = "http://api.wunderground.com/api/8204b5c9bf753afb/conditions/q/CO/Loveland.json";
	
	// Create JSON build method
	public static JSONObject buildJSON() {
		// Create cities object
		JSONObject citiesObject = new JSONObject();
		try {
			// Create query object
			JSONObject queryObject = new JSONObject();

			// Create city object in query object
			for (CitiesEnum city : CitiesEnum.values()) {
				// Create city object
				JSONObject cityObject = new JSONObject();

				// Add city info to city object
				cityObject.put("cityName", city.getCityName());
				cityObject.put("stateName", city.getStateName());
				cityObject.put("fahrenheitTemp", city.getFahrenheitTemp());
				cityObject.put("celsiusTemp", city.getCelsiusTemp());
				// Add city object to query object
				queryObject.put(city.name().toString(), cityObject);
			}
			// Add query to cities objects
			citiesObject.put("cities", queryObject);

		} catch (JSONException e) {
			e.printStackTrace();
			// System.out.println("Build JSON catch");
		}
		// Return the cities object
		return citiesObject;
	}

	// Create read JSON method
	public static String readJSON(String selectedCity) {
		// String for results and city info
		String results, city, state, fahrenheit, celsius, tempSelected;
		// Create new JSON object to hold object from buildJSON
		//JSONObject newObject = buildJSON();
		JSONObject newObject = new JSONObject();

		// public String passedTemp = MainActivity
		try {
			System.out.println("Read JSON try");
			// Get query object and apply to strings for use in results string
			city = newObject.getJSONObject("cities").getJSONObject(selectedCity).getString("cityName");
			state = newObject.getJSONObject("cities").getJSONObject(selectedCity).getString("stateName");
			fahrenheit = newObject.getJSONObject("cities").getJSONObject(selectedCity).getString("fahrenheitTemp");
			celsius = newObject.getJSONObject("cities").getJSONObject(selectedCity).getString("celsiusTemp");

			// Set tempSelected based on selected temp in MainActivity. Defaults to Fahrenheit if nothing is selected
			if (MainActivity.selectedTempMeasurement.equalsIgnoreCase("Fahrenheit")) {
				tempSelected = fahrenheit + " ¡F";
			} else {
				tempSelected = celsius + " ¡C";
			}

			// Set results string with city info strings
			results = "City: " + city + "\r\n" 
					+ "State: " + state + "\r\n"
					+ "Current Temp: " + tempSelected + "\r\n";
		} catch (JSONException e) {
			e.printStackTrace();
			results = e.toString();
			// results = "broken";
			System.out.println("Read JSON catch");
		}

		// Return results
		return results;
	}
	
	//Method to test network
		public static Boolean connectionStatus(Context myContext){
			//Set connection bool to false
			Boolean connectionBool = false;
			
			//Create connectivity manager
			ConnectivityManager cm = (ConnectivityManager) myContext.getSystemService(Context.CONNECTIVITY_SERVICE);
			NetworkInfo ni = cm.getActiveNetworkInfo();
			//Check if network info is null
			if(ni != null){
				//Check if network info is connected
				if (ni.isConnected()) {
					System.out.println(TAG + " Connection Type: " + ni.getTypeName());
					//Set connection bool to true
					connectionBool = true;
				}
			}
			//Return connection bool
			return connectionBool;
		}
		
		//Method to get response from url
		public static String getResponse(URL url) {
			//Create string for response
			String response = "";
			
			try {
				//Open connection
				URLConnection connection = url.openConnection();
				//Create buffered input stream
				BufferedInputStream bin = new BufferedInputStream(connection.getInputStream());
				//Create byte and set to 1024
				byte[] contextByte = new byte[1024];
				//Create int for bytes read
				int byteRead = 0;
				//Create string buffer for adding response to
				StringBuffer responseBuffer = new StringBuffer();
				//While loop
				while ((byteRead = bin.read(contextByte)) != -1) {
					//Set response string to receive bytes
					response = new String(contextByte, 0, byteRead);
					//Append response to response buffer
					responseBuffer.append(response);
				}
				
				//Fill response string with response buffer once while loop completes
				response = responseBuffer.toString();
				//System.out.println(TAG + response);
				//Log response
				Log.i(TAG, response);
			} catch (IOException e) {
				//Set response to error
				response = "URL broken";
				//e.printStackTrace();
				//Log error
				Log.e(TAG, "Something went wrong", e);
			}
			//Return reponse string
			return response;
		}
		
		//Async getData class to call url
		public static class getData extends AsyncTask<String, Void, String>{

			@Override
			protected String doInBackground(String... params) {
				String responseString = "";
				try {
					//Apply testURL to local url
					URL url = new URL(testURL);
					//Call getResponse and apply to responseString
					responseString = getResponse(url);
				} catch (MalformedURLException e) {
					//Set response string to error
					responseString = "Something went wrong in getData";
					//e.printStackTrace();
					//Log error
					Log.e(TAG, "ERROR: ", e);
				}
				//Return responseString
				return responseString;
			}
			
			//Override onPostExecute to display response
			@Override
			protected void onPostExecute(String result) {
				MainActivity.displayTempView.setText(result);
				super.onPostExecute(result);
				System.out.println(result);
			}
			
		}
}
